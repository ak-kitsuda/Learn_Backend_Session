---
description: 
globs: 
alwaysApply: true
---
# データベース・APIサーバー動作確認コマンドルール

## 基本方針
データベース確認やサーバー動作確認は、学習効果を高めるためにユーザー自身が手動でコマンドを実行して確認することを推奨する。各コマンドの詳細な手順、期待される出力、入力/出力の解説を含める。

## 適用場面

### 1. データベース関連の確認
- テーブル作成後の確認
- データ挿入後の確認
- データベース構造の確認
- セッションストアの確認
- データベースファイルサイズの確認

### 2. サーバー動作確認
- APIエンドポイントのテスト
- 認証機能のテスト
- セッション管理のテスト
- エラーハンドリングの確認
- レスポンス形式の確認

### 3. 設定ファイルの動作確認
- 環境設定の確認
- ミドルウェアの動作確認
- セキュリティ設定の確認

## データベース確認コマンド詳細

### 1. データベースファイル確認

#### コマンド
```bash
ls -la backend/database/
```

#### 入力の説明
- `ls`: ファイル一覧表示コマンド
- `-la`: 詳細表示（-l）と隠しファイル表示（-a）オプション
- `backend/database/`: 対象ディレクトリパス

#### 期待される出力
```
total 28
drwxr-xr-x 2 user user  4096 Dec 15 10:30 .
drwxr-xr-x 6 user user  4096 Dec 15 10:25 ..
-rw-r--r-- 1 user user 12288 Dec 15 10:30 sessions.db
-rw-r--r-- 1 user user 20480 Dec 15 10:30 todo.db
```

#### 出力の解説
- **ファイルサイズ**: 
  - `sessions.db`: セッション管理用データベース（通常12KB～）
  - `todo.db`: メインデータベース（テーブル作成後20KB～）
- **権限**: `-rw-r--r--`（読み書き可能）
- **タイムスタンプ**: 最終更新日時

#### エラーパターンと対応
```bash
# エラー例1: ディレクトリが存在しない
ls: cannot access 'backend/database/': No such file or directory
# 対応: mkdir -p backend/database

# エラー例2: ファイルサイズが0バイト
-rw-r--r-- 1 user user     0 Dec 15 10:30 todo.db
# 対応: データベース初期化が必要
```

### 2. SQLiteデータベース内容確認

#### コマンド（対話型）
```bash
sqlite3 backend/database/todo.db
```

#### SQLiteプロンプトでの操作
```sql
-- テーブル一覧表示
.tables

-- テーブル構造確認
.schema users

-- データ確認
SELECT * FROM users;

-- 終了
.quit
```

#### 期待される出力例
```sql
sqlite> .tables
users

sqlite> .schema users
CREATE TABLE users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  username TEXT UNIQUE NOT NULL,
  email TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

sqlite> SELECT * FROM users;
1|testuser|test@example.com|$2b$10$...|2024-12-15 10:30:00|2024-12-15 10:30:00

sqlite> .quit
```

#### コマンド（非対話型）
```bash
# テーブル一覧
sqlite3 backend/database/todo.db ".tables"

# スキーマ確認
sqlite3 backend/database/todo.db ".schema users"

# データ確認
sqlite3 backend/database/todo.db "SELECT COUNT(*) FROM users;"
```

#### 出力の解説
- **テーブル名**: `users`（ユーザー情報テーブル）
- **カラム構造**: 
  - `id`: 主キー（自動増分）
  - `username`: ユーザー名（ユニーク制約）
  - `email`: メールアドレス（ユニーク制約）
  - `password_hash`: ハッシュ化されたパスワード
  - `created_at/updated_at`: タイムスタンプ

### 3. Node.jsスクリプトによる確認

#### コマンド
```bash
node backend/scripts/check-tables.js
```

#### 期待される出力
```
📋 データベーステーブル確認結果:

✅ データベース接続成功
📊 テーブル一覧:
  - users

🔍 usersテーブル詳細:
  - id: INTEGER (PRIMARY KEY)
  - username: TEXT NOT NULL
  - email: TEXT NOT NULL  
  - password_hash: TEXT NOT NULL
  - created_at: DATETIME DEFAULT CURRENT_TIMESTAMP
  - updated_at: DATETIME DEFAULT CURRENT_TIMESTAMP

📈 データ件数: 1件
```

#### エラーパターンと対応
```
❌ エラー: SQLITE_CANTOPEN: unable to open database file
# 対応: データベースファイルパスの確認

❌ エラー: no such table: users
# 対応: テーブル作成スクリプトの実行が必要
```

## APIサーバー確認コマンド詳細

### 1. サーバー起動確認

#### コマンド
```bash
cd backend && npm run dev
```

#### 期待される出力
```
> backend@1.0.0 dev
> nodemon server.js

[nodemon] 3.0.2
[nodemon] to restart at any time, enter `rs`
[nodemon] watching path(s): *.*
[nodemon] watching extensions: js,mjs,json
[nodemon] starting `node server.js`

🚀 サーバーが起動しました
🌐 ポート: 3000
📊 データベース接続: 成功
⏰ 起動時刻: 2024-12-15T10:30:00.000Z
```

#### 出力の解説
- **nodemon**: 開発用サーバー（ファイル変更時自動再起動）
- **ポート3000**: アプリケーションがリッスンするポート
- **データベース接続成功**: SQLite接続確認
- **起動時刻**: サーバー開始時刻

#### エラーパターンと対応
```
Error: listen EADDRINUSE :::3000
# 対応: ポート3000が使用中、別のプロセスを停止または別ポート使用

Error: SQLITE_CANTOPEN: unable to open database file
# 対応: データベースファイルパスの確認
```

### 2. 基本APIエンドポイントテスト

#### コマンド
```bash
curl -X GET http://localhost:3000/api/hello
```

#### 入力の説明
- `curl`: HTTP通信コマンドラインツール
- `-X GET`: HTTPメソッド指定（GETリクエスト）
- `http://localhost:3000`: サーバーアドレス
- `/api/hello`: エンドポイントパス

#### 期待される出力
```json
{
  "message": "Hello from Express API!",
  "timestamp": "2024-12-15T10:30:00.000Z",
  "status": "success"
}
```

#### 出力の解説
- **JSON形式**: レスポンスボディの形式
- **message**: APIからのメッセージ
- **timestamp**: レスポンス生成時刻
- **status**: 処理結果ステータス

#### 詳細確認（ヘッダー情報含む）
```bash
curl -v http://localhost:3000/api/hello
```

#### 詳細出力例
```
* Connected to localhost (127.0.0.1) port 3000 (#0)
> GET /api/hello HTTP/1.1
> Host: localhost:3000
> User-Agent: curl/7.81.0
> Accept: */*
> 
< HTTP/1.1 200 OK
< X-Powered-By: Express
< Access-Control-Allow-Origin: *
< Content-Type: application/json; charset=utf-8
< Content-Length: 87
< ETag: W/"57-example"
< Date: Sun, 15 Dec 2024 10:30:00 GMT
< Connection: keep-alive
< Keep-Alive: timeout=5
< 
{
  "message": "Hello from Express API!",
  "timestamp": "2024-12-15T10:30:00.000Z",
  "status": "success"
}
```

### 3. データベース接続APIテスト

#### コマンド
```bash
curl -X GET http://localhost:3000/api/db-test
```

#### 期待される出力
```json
{
  "message": "データベース接続テスト成功",
  "database": "SQLite",
  "timestamp": "2024-12-15T10:30:00.000Z",
  "tables": ["users"]
}
```

### 4. 認証APIテスト（Phase2以降）

#### ユーザー登録テスト
```bash
curl -X POST http://localhost:3000/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "username": "testuser",
    "email": "test@example.com", 
    "password": "password123"
  }'
```

#### 入力の説明
- `-X POST`: POSTリクエスト
- `-H "Content-Type: application/json"`: リクエストヘッダー設定
- `-d '{...}'`: リクエストボディ（JSON形式）

#### 期待される出力（成功時）
```json
{
  "message": "ユーザー登録成功",
  "user": {
    "id": 1,
    "username": "testuser",
    "email": "test@example.com"
  },
  "timestamp": "2024-12-15T10:30:00.000Z"
}
```

#### エラーパターンと対応
```json
// エラー例1: ユーザー名重複
{
  "error": "ユーザー名が既に使用されています",
  "code": "DUPLICATE_USERNAME"
}

// エラー例2: バリデーションエラー
{
  "error": "パスワードは8文字以上である必要があります",
  "code": "VALIDATION_ERROR"
}
```

#### ログインテスト（クッキー保存）
```bash
curl -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "username": "testuser",
    "password": "password123"
  }' \
  -c cookies.txt
```

#### 入力の説明
- `-c cookies.txt`: レスポンスクッキーをファイルに保存

#### 期待される出力
```json
{
  "message": "ログイン成功",
  "user": {
    "id": 1,
    "username": "testuser",
    "email": "test@example.com"
  }
}
```

#### 認証状態確認テスト
```bash
curl -X GET http://localhost:3000/api/auth/me \
  -b cookies.txt
```

#### 入力の説明
- `-b cookies.txt`: 保存されたクッキーを送信

## エラーハンドリングと対応方法

### 1. 接続エラー
```bash
curl: (7) Failed to connect to localhost port 3000: Connection refused
```
**対応方法:**
1. サーバーが起動しているか確認: `ps aux | grep node`
2. ポート3000が使用中か確認: `netstat -tlnp | grep 3000`
3. サーバーを再起動: `npm run dev`

### 2. JSONパースエラー
```json
{
  "error": "Unexpected token in JSON at position 0"
}
```
**対応方法:**
1. リクエストボディのJSON形式を確認
2. Content-Typeヘッダーが正しく設定されているか確認
3. 特殊文字のエスケープ確認

### 3. データベースエラー
```json
{
  "error": "SQLITE_ERROR: no such table: users"
}
```
**対応方法:**
1. テーブル作成スクリプトの実行: `node backend/scripts/create-users-table.js`
2. データベースファイルの存在確認: `ls -la backend/database/`
3. データベース権限の確認

## 段階的確認プロセス

### Phase1完了確認
```bash
# 1. ディレクトリ構造確認
ls -la backend/

# 2. パッケージ確認
cd backend && npm list --depth=0

# 3. サーバー起動テスト
npm run dev

# 4. 基本API確認（別ターミナル）
curl http://localhost:3000/api/hello
curl http://localhost:3000/api/db-test
```

### Phase2完了確認
```bash
# 1. データベーステーブル確認
sqlite3 backend/database/todo.db ".tables"

# 2. テーブル構造確認
node backend/scripts/check-tables.js

# 3. 認証API確認
curl -X POST http://localhost:3000/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{"username":"testuser","email":"test@example.com","password":"password123"}'

# 4. ログイン確認
curl -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"username":"testuser","password":"password123"}' \
  -c cookies.txt

# 5. 認証状態確認
curl -X GET http://localhost:3000/api/auth/me -b cookies.txt
```

## デバッグとトラブルシューティング

### 1. ログ確認方法
```bash
# サーバーログの確認
tail -f backend/logs/app.log

# システムログの確認（Ubuntu/Debian）
journalctl -f

# プロセス確認
ps aux | grep node
```

### 2. ネットワーク確認
```bash
# ポート使用状況確認
netstat -tlnp | grep 3000

# ローカル接続テスト
telnet localhost 3000

# DNS解決確認
nslookup localhost
```

### 3. データベース整合性確認
```bash
# データベースファイル整合性チェック
sqlite3 backend/database/todo.db "PRAGMA integrity_check;"

# データベースサイズ確認
du -h backend/database/todo.db

# バックアップ作成
cp backend/database/todo.db backend/database/todo.db.backup
```

## 学習効果の向上

### 1. 理解の促進
- **コマンド実行**: ユーザー自身がコマンドを打つことで理解が深まる
- **結果確認**: 実際の出力を見ることで動作を体感できる
- **エラー体験**: エラーが発生した場合の対処法を学べる

### 2. 実践スキルの向上
- **コマンドライン操作**: Linux/Unixコマンドに慣れる
- **デバッグスキル**: エラーメッセージの読み方とトラブルシューティング
- **API理解**: HTTP通信とRESTful APIの仕組み理解

### 3. 段階的な確認習慣
- **各ステップでの確認**: 問題の早期発見と修正
- **動作検証**: 期待通りに動作することの確認
- **次ステップへの準備**: 安心して次の段階に進める

## 注意事項

### 1. セキュリティ考慮
- **本番環境での注意**: 開発環境以外では慎重にコマンド実行
- **認証情報の取り扱い**: パスワードやトークンの適切な管理
- **ログ情報の保護**: 機密情報がログに出力されないよう注意

### 2. 環境依存への対応
- **OS固有コマンド**: Windows/Mac/Linuxでの違いを考慮
- **パス区切り文字**: `/`（Unix系）と`\`（Windows）の違い
- **権限問題**: ファイル/ディレクトリのアクセス権限確認

### 3. 段階的実行の重要性
- **一度に多くのコマンドを実行しない**: 1つずつ確実に実行
- **前ステップの完了確認**: 次に進む前に必ず結果を確認
- **エラー時の対応**: エラーが発生したら即座に対処

このルールに従って、データベースとAPIサーバーの動作確認を体系的に行い、学習効果を最大化します。
