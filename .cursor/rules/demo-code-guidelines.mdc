---
description: 
globs: 
alwaysApply: true
---
# デモコード作成・クリーンアップガイドライン

## デモコード作成の基本方針

### 目的
- ユーザーの質問に対する理解を深めるための実践的なデモンストレーション
- 概念の可視化と動作確認による学習効果の向上
- 安全で一時的なコード実装

### デモコード作成のルール

#### 1. 一時的な実装
- **必ず学習用デモであることを明記**
  ```javascript
  // 【学習用デモ】プレースホルダーの動作確認エンドポイント
  app.get('/api/demo-placeholder', (req, res) => {
  ```

- **デモ専用の命名規則**
  - エンドポイント: `/api/demo-*` または `/api/*-demo`
  - テーブル: `demo_*` (例: `demo_users`, `demo_table`)
  - 変数: `demo*` または `*Demo`

#### 2. 安全性の確保
- **本番コードに影響しない独立性**
  - 既存の機能を変更・削除しない
  - 独立したテーブル・エンドポイントを使用
  - 本番データに影響を与えない

- **セキュリティチェック**
  - プレースホルダー（?）の使用を必須とする
  - ユーザー入力の適切な検証
  - エラーハンドリングの実装

#### 3. 教育的価値
- **詳細なコメント**
  ```javascript
  // なぜこの方法を使うのか？
  // どのような問題を解決するのか？
  // 他の方法との違いは何か？
  ```

- **段階的な説明**
  - ステップバイステップの実装
  - 各段階での動作確認
  - 結果の可視化

## デモ後のクリーンアップ手順

### 1. コードの削除
学習完了後は必ずデモコードを削除する：

```bash
# 1. デモエンドポイントの削除確認
grep -r "demo\|Demo\|DEMO" backend/server.js

# 2. デモテーブルの確認（必要に応じて）
sqlite3 backend/database/todo.db ".tables"
```

### 2. データベースのクリーンアップ

#### デモテーブルが作成された場合
```bash
# デモテーブルのみ削除（推奨）
sqlite3 backend/database/todo.db "DROP TABLE IF EXISTS demo_users;"
sqlite3 backend/database/todo.db "DROP TABLE IF EXISTS demo_table;"

# または、データベース全体をリセット（学習段階では許可）
rm backend/database/todo.db
touch backend/database/todo.db
```

#### ファイルサイズの確認
```bash
# クリーンアップ前後のサイズ比較
ls -la backend/database/todo.db
```

### 3. Gitでの管理

#### 変更の確認
```bash
# 作業ディレクトリの状態確認
git status

# 変更内容の詳細確認
git diff

# ステージングエリアの確認
git diff --cached
```

#### コミット戦略

**学習用デモの場合（一時的）**:
```bash
# デモコード追加時
git add .
git commit -m "Add demo code for [学習内容] explanation"

# デモコード削除時（同じコミット内で完結させる）
git add .
git commit --amend -m "Add demo code for [学習内容] explanation (cleaned up)"
```

**または、デモ専用ブランチの使用**:
```bash
# デモ用ブランチ作成
git checkout -b demo/[学習内容]

# デモコード実装・テスト
git add .
git commit -m "Add demo code for [学習内容]"

# メインブランチに戻ってクリーンアップ
git checkout main
# デモブランチは削除（必要に応じて）
git branch -D demo/[学習内容]
```

### 4. クリーンアップチェックリスト

#### コード面
- [ ] デモ用エンドポイントの削除確認
- [ ] デモ用変数・関数の削除確認
- [ ] デモ用コメントの削除確認
- [ ] 本番コードの完全性確認

#### データベース面
- [ ] デモテーブルの削除確認
- [ ] データベースファイルサイズの確認
- [ ] 不要なデータの削除確認

#### Git面
- [ ] 作業ディレクトリのクリーン状態確認
- [ ] 適切なコミットメッセージ
- [ ] リモートリポジトリとの同期

## 緊急時の対応

### デモコードが本番に影響した場合
```bash
# 直前のコミットに戻る
git reset --hard HEAD~1

# 特定のファイルのみ復元
git checkout HEAD~1 -- backend/server.js

# 強制的にクリーンな状態に戻す
git clean -fd
git reset --hard origin/main
```

### データベースが破損した場合
```bash
# バックアップからの復元（事前にバックアップがある場合）
cp backend/database/todo.db.backup backend/database/todo.db

# 完全リセット（学習段階では許可）
rm backend/database/todo.db
touch backend/database/todo.db
```

## ベストプラクティス

### 1. 事前準備
- デモ実装前に現在の状態をGitコミット
- 必要に応じてデータベースのバックアップ作成
- デモの目的と範囲を明確化

### 2. 実装中
- 小さな単位での動作確認
- 各ステップでの結果記録
- エラーが発生した場合の適切な対処

### 3. 事後処理
- 必ずクリーンアップの実行
- 学習内容の記録・整理
- 次のフェーズへの準備

## 注意事項

- **本番環境では絶対にデモコードを残さない**
- **セキュリティリスクのあるコードは実装しない**
- **デモコードは最小限の実装に留める**
- **必ず教育的価値のあるデモのみ実装する**

このガイドラインに従うことで、安全で効果的な学習用デモコードの作成・管理が可能になります。
