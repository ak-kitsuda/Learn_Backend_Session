---
description: 
globs: 
alwaysApply: true
---
# Git セキュリティチェック - 個人情報流出防止ルール

## 必須チェック項目

### 🔒 コミット前の必須確認

**すべてのコミット前に以下を確認してください：**

1. **個人情報の除去確認**
2. **機密情報の除去確認**
3. **設定ファイルの安全性確認**
4. **ログファイルの除外確認**

## 🚨 絶対にコミットしてはいけない情報

### 個人情報
- [ ] 実名、住所、電話番号
- [ ] メールアドレス（公開用以外）
- [ ] 生年月日、個人識別番号
- [ ] クレジットカード情報
- [ ] パスポート番号、免許証番号

### 認証・機密情報
- [ ] パスワード（平文）
- [ ] APIキー、トークン
- [ ] データベース接続文字列
- [ ] 秘密鍵、証明書
- [ ] セッションシークレット

### システム情報
- [ ] サーバーのIPアドレス
- [ ] 内部ネットワーク情報
- [ ] 本番環境の設定値
- [ ] デバッグ情報、ログファイル

## 📋 コミット前チェックリスト

### ステップ1: ファイル内容の確認
```bash
# 追加予定のファイルを確認
git diff --cached

# 新しく追加されるファイルを確認
git status
```

### ステップ2: 危険なパターンの検索
以下のコマンドで危険な文字列を検索：

```bash
# パスワード関連
grep -r "password\|pwd\|pass" --include="*.js" --include="*.json" --include="*.md" .

# APIキー関連  
grep -r "api_key\|apikey\|secret\|token" --include="*.js" --include="*.json" .

# メールアドレス
grep -r "@gmail\|@yahoo\|@hotmail" --include="*.js" --include="*.json" --include="*.md" .

# IPアドレス
grep -r "[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}" --include="*.js" --include="*.json" .
```

### ステップ3: .gitignore の確認
以下のファイル/ディレクトリが適切に除外されているか確認：

```
# 環境設定ファイル
.env
.env.local
.env.production
config/secrets.js

# ログファイル
*.log
logs/
tmp/

# データベースファイル（本番）
*.db
*.sqlite
*.sqlite3

# キャッシュ・一時ファイル
node_modules/
.cache/
dist/
build/

# IDE設定（個人設定含む可能性）
.vscode/settings.json
.idea/
```

## 🛡️ 安全な開発のベストプラクティス

### 環境変数の使用
```javascript
// ❌ 危険: 直接記述
const apiKey = "sk-1234567890abcdef";

// ✅ 安全: 環境変数使用
const apiKey = process.env.API_KEY;
```

### 設定ファイルの分離
```javascript
// config/database.js
module.exports = {
  development: {
    host: process.env.DB_HOST || 'localhost',
    password: process.env.DB_PASSWORD
  }
};
```

### サンプル設定ファイルの提供
```
config/
├── database.js          # 環境変数使用
├── database.example.js  # サンプル（コミット可）
└── secrets.js          # 除外対象
```

## 🚨 緊急時の対応

### 既にコミットしてしまった場合

1. **まだプッシュしていない場合**
```bash
# 最新のコミットを取り消し
git reset --soft HEAD~1

# ファイルを修正後、再コミット
git add .
git commit -m "Fix: Remove sensitive information"
```

2. **既にプッシュしてしまった場合**
```bash
# 履歴を書き換え（危険）
git rebase -i HEAD~n

# または新しいコミットで修正
git add .
git commit -m "Remove sensitive information"
git push origin main
```

**⚠️ 重要:** プッシュ済みの機密情報は完全には削除できません。
- APIキーは即座に無効化
- パスワードは即座に変更
- 必要に応じてリポジトリの削除を検討

## 🔧 自動化ツールの活用

### pre-commit フックの設定
```bash
# pre-commit のインストール
npm install --save-dev pre-commit

# package.json に追加
{
  "scripts": {
    "precommit": "npm run security-check"
  }
}
```

### セキュリティスキャンの実行
```bash
# npm audit で脆弱性チェック
npm audit

# 機密情報スキャン（手動）
grep -r "TODO.*password\|FIXME.*key" .
```

## 📝 コミットメッセージの注意

### 避けるべきコミットメッセージ
- ❌ "Add my personal API key"
- ❌ "Fix password: mypassword123"
- ❌ "Update config with real database credentials"

### 推奨するコミットメッセージ
- ✅ "Add API configuration using environment variables"
- ✅ "Fix authentication configuration"
- ✅ "Update database configuration structure"

## 🎯 チーム開発での注意点

1. **コードレビューでの確認**
   - プルリクエスト時に機密情報チェック
   - レビュアーも責任を持って確認

2. **定期的な監査**
   - 月1回程度の全ファイルスキャン
   - 機密情報検出ツールの導入検討

3. **教育・共有**
   - チームメンバーへのセキュリティ意識共有
   - このルールの定期的な見直し

---

**🔴 最重要**: 疑わしい場合は必ずコミット前に相談してください。
個人情報や機密情報の流出は取り返しがつかない場合があります。
