---
description: 
globs: 
alwaysApply: true
---
# Phase・ステップ管理ルール - 学習プロジェクト専用

## 基本原則

### 🚨 必須遵守事項
**絶対に複数のステップを一度に進めてはいけません**

- **一度に実装できるのは現在指示されたステップのみ**
- **次のステップは必ずユーザーの明示的な承認後に実行**
- **「効率化」を理由にした複数ステップの同時実装は禁止**

## ステップ実装の流れ

### 1. ステップ開始前の確認
```
現在のステップ: [ステップ番号と内容]
前ステップの完了状況: [確認済み/未確認]
実装予定の機能: [具体的な機能リスト]
```

### 2. ステップ実装中
- **現在のステップのみに集中**
- **次のステップの内容は実装しない**
- **関連する機能でも次ステップの場合は実装しない**

### 3. ステップ完了時
```markdown
## [ステップ番号] 完了報告

**実装完了項目**:
- [項目1]
- [項目2]

**動作確認結果**:
- [確認内容と結果]

**次のステップの準備**:
次は「[次ステップの概要]」に進む準備ができています。
実装を開始してよろしいでしょうか？
```

## 禁止事項

### ❌ やってはいけないこと
1. **複数ステップの同時実装**
   ```javascript
   // ❌ 悪い例: ステップ3でステップ4の内容も実装
   app.use(session({...})); // ステップ3
   app.post('/api/auth/login', ...); // ステップ4 - これは禁止
   ```

2. **「効率化」を理由とした先取り実装**
   - 「ついでに」という理由での追加実装
   - 「関連するから」という理由での次ステップ実装

3. **ユーザー承認なしの次ステップ進行**

### ✅ 正しい実装方法
```javascript
// ✅ 良い例: ステップ3のみに集中
app.use(session({
  store: new SQLiteStore({...}),
  secret: '...',
  // ステップ3のセッション設定のみ
}));

// ステップ4の認証APIは次の承認後に実装
```

## エラー発生時の対応

### ステップを飛び越えて実装してしまった場合
1. **即座に実装を停止**
2. **過剰実装部分を削除**
3. **現在のステップ完了状態に戻す**
4. **ユーザーに謝罪と状況報告**

### 実装戻し手順
```bash
# 1. 変更内容の確認
git diff

# 2. 過剰実装部分の特定
# 3. search_replace または edit_file で削除
# 4. 現在ステップのみの状態に復旧
```

## Phase2での具体例

### Phase2のステップ構成
- ステップ1: パッケージインストール
- ステップ2: ユーザーテーブル作成  
- ステップ3: セッション設定 ← **ここで止まる**
- ステップ4: 認証API実装 ← **承認後に実装**
- ステップ5: 認証ミドルウェア ← **承認後に実装**

### 正しい進行例
```
ユーザー: "ステップ3を実装してください"
AI: [ステップ3のセッション設定のみ実装]
AI: "ステップ3完了。次はステップ4に進みますか？"
ユーザー: "はい"
AI: [ステップ4の認証API実装開始]
```

## 学習効果の観点

### なぜ段階的実装が重要か
1. **理解の定着**: 各ステップで概念を確実に理解
2. **デバッグの容易さ**: 問題の特定が簡単
3. **学習ペースの調整**: ユーザーのペースに合わせた進行
4. **質問機会の確保**: 各ステップで疑問を解決

### 学習者への配慮
- **一度に大量の情報を提供しない**
- **各ステップの意味と目的を明確に説明**
- **次ステップへの準備状況を確認**

## チェックリスト

### 実装前チェック
- [ ] 現在のステップを正確に把握している
- [ ] 前のステップが完了している
- [ ] 実装予定の内容が現在ステップに限定されている
- [ ] 次ステップの内容が含まれていない

### 実装後チェック
- [ ] 現在ステップの要件をすべて満たしている
- [ ] 余計な機能を実装していない
- [ ] 動作確認が完了している
- [ ] 次ステップの承認を求めている

## 緊急時対応

もし複数ステップを実装してしまった場合：

1. **作業を即座に停止**
2. **ユーザーに状況を報告**
3. **過剰実装部分を特定・削除**
4. **現在ステップ完了状態に復旧**
5. **再発防止策を確認**

---

**重要**: このルールは学習プロジェクトの効果を最大化するためのものです。
効率よりも理解と学習を優先し、ユーザーのペースを尊重してください。
