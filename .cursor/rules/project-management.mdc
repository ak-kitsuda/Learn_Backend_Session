---
description: 
globs: 
alwaysApply: true
---
# セッション/クッキーベース認証 Todo学習プロジェクト管理ルール

## プロジェクト概要
- **目的**: セッション/クッキーベース認証の理解
- **技術スタック**: Express.js + SQLite + Vue.js
- **学習レベル**: 初心者向け
- **対比学習**: JWTとの違いを明確化

## 実装フェーズ管理

### Phase 1: バックエンド基盤構築
- [ ] Express.jsサーバーセットアップ
- [ ] SQLiteデータベース接続
- [ ] 基本的なルーティング設定
- [ ] ミドルウェア設定

### Phase 2: 認証システム実装
- [ ] ユーザーモデル作成
- [ ] パスワードハッシュ化（bcrypt）
- [ ] セッション設定（express-session）
- [ ] セッションストア（SQLite）
- [ ] 認証ミドルウェア

### Phase 3: Todo機能実装
- [ ] Todoモデル作成
- [ ] CRUD API実装
- [ ] 認可チェック（ユーザー所有権）
- [ ] エラーハンドリング

### Phase 4: フロントエンド実装
- [ ] Vue.jsプロジェクトセットアップ
- [ ] 認証コンポーネント
- [ ] Todoコンポーネント
- [ ] API通信（axios/fetch）
- [ ] 状態管理（Vuex）

### Phase 5: セキュリティ・最適化
- [ ] CORS設定
- [ ] セキュリティヘッダー
- [ ] バリデーション強化
- [ ] エラーメッセージ最適化

## 学習ポイント管理

### 必須理解項目
1. **セッションの仕組み**
   - サーバーサイド状態管理
   - セッションIDの生成と管理
   - クッキーでの送受信

2. **認証フロー**
   - ログイン処理の流れ
   - セッション作成・検証
   - ログアウト処理

3. **セキュリティ考慮**
   - パスワードハッシュ化
   - セッションハイジャック対策
   - CSRF対策

### コード品質ルール
- **命名規則**: キャメルケース（JS）、スネークケース（DB）
- **ファイル構成**: 機能別分離
- **エラーハンドリング**: 一貫したエラーレスポンス
- **コメント**: 学習者向けに理由を説明

## 実装チェックリスト

### セッション実装確認
- [ ] express-session設定完了
- [ ] セッションストア（SQLite）設定
- [ ] クッキー設定（httpOnly, secure, sameSite）
- [ ] セッションタイムアウト設定

### 認証実装確認
- [ ] bcryptでパスワードハッシュ化
- [ ] ログイン/ログアウト動作
- [ ] 認証ミドルウェア動作
- [ ] 未認証時の適切なリダイレクト

### API実装確認
- [ ] RESTful設計準拠
- [ ] 適切なHTTPステータスコード
- [ ] JSON形式のレスポンス
- [ ] エラーハンドリング実装

## トラブルシューティング

### よくある問題
1. **セッションが保持されない**
   - クッキー設定の確認
   - CORS設定の確認
   - セッションストアの動作確認

2. **認証が機能しない**
   - パスワードハッシュの比較確認
   - セッションミドルウェアの順序確認
   - セッションIDの生成確認

3. **フロントエンドとの通信エラー**
   - CORS設定の確認
   - クッキー送信設定の確認
   - APIエンドポイントの確認

## 学習目標達成確認

### 理解度チェック
- [ ] セッション/クッキーの仕組みを説明できる
- [ ] JWTとの違いを説明できる
- [ ] 認証フローを図で表現できる
- [ ] セキュリティリスクを理解している

### 実装スキル確認
- [ ] Express.jsでセッション認証を実装できる
- [ ] SQLiteでセッション管理ができる
- [ ] Vue.jsで認証状態を管理できる
- [ ] 適切なエラーハンドリングができる
